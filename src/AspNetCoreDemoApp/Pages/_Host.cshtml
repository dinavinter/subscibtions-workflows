@page "/"
@using Elsa.Expressions
@{
    var serverUrl = $"{Request.Scheme}://{Request.Host}";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Elsa Workflows</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/images/favicon-16x16.png">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/assets/fonts/inter/inter.css">
    <link rel="stylesheet" href="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.css">
    <script src="/_content/Elsa.Designer.Components.Web/monaco-editor/min/vs/loader.js"></script>
    <script type="module" src="/_content/Elsa.Designer.Components.Web/elsa-workflows-studio/elsa-workflows-studio.esm.js"></script>
</head>
<body>
<elsa-studio-root server-url="@serverUrl" monaco-lib-path="_content/Elsa.Designer.Components.Web/monaco-editor/min">
    <elsa-studio-dashboard></elsa-studio-dashboard>
</elsa-studio-root>

    <script type="module" src="~/plugins/plugins.js"></script>

<script type="module">
 // const {SendEmailInvitationPlugin} = require("../../dashboard-plugins/plugins-studio/gigya-workflow-plugins/www/build/gigya-workflow-plugins.esm");
 const elsaStudioRoot = document.querySelector('elsa-studio-root');


    // Custom activity property type input control plugin:
    function PropertyEditorDecoratorPlugin(elsaStudio) {
        const {propertyDisplayManager, getOrCreateProperty} = elsaStudio;
        function defaultSyntax (pd, syntax){return pd.defaultSyntax === syntax;}
        function liquid (pd){return defaultSyntax(pd, "@SyntaxNames.Liquid")}
        function javaScript (pd){return defaultSyntax(pd, "@SyntaxNames.JavaScript")}
        function json (pd){return defaultSyntax(pd, "@SyntaxNames.Json")}
        function variable (pd){return defaultSyntax(pd, "@SyntaxNames.Variable")}

        propertyDisplayManager.originalDisplay = propertyDisplayManager.display;
        propertyDisplayManager.display= displayDecorator;
         function displayDecorator(activity, propertyDescriptor) {
             if ( liquid(propertyDescriptor) || javaScript(propertyDescriptor) || variable(propertyDescriptor) ){
             const propertyModel = getOrCreateProperty(activity, propertyDescriptor.name,()=> propertyDescriptor.defaultValue,()=> propertyDescriptor.defaultSyntax );
             propertyModel.syntax = propertyModel.syntax || propertyDescriptor.defaultSyntax ;
             console.log(propertyModel);
               }
             return  propertyDisplayManager.originalDisplay(activity, propertyDescriptor);
          }
    }



    elsaStudioRoot.addEventListener('initializing', e => {
        const elsaStudio = e.detail;
        elsaStudio.pluginManager.registerPlugins([PropertyEditorDecoratorPlugin]);
    });
</script>
</body>
</html>